{"version":3,"sources":["components/LoginForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/MessageForm.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["Modal","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MyMessage","message","attachments","length","src","file","alt","style","float","marginRight","color","backgroundColor","text","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","MessageForm","props","setValue","chatId","creds","event","trim","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","display","files","bind","SendOutlined","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","LoginForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43d2865c.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst projectID = '8fb656ec-d1c3-4182-b323-5842c89a393d';\r\n\r\nconst Modal = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const authObject = { 'Project-ID': projectID, 'User-Name': username, 'User-Secret': password };\r\n\r\n    try {\r\n      await axios.get('https://api.chatengine.io/chats', { headers: authObject });\r\n\r\n      localStorage.setItem('username', username);\r\n      localStorage.setItem('password', password);\r\n\r\n      window.location.reload();\r\n      setError('');\r\n    } catch (err) {\r\n      setError('Oops, incorrect credentials.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"form\">\r\n        <h1 className=\"title\">Chat Application</h1>\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\r\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\r\n          <div align=\"center\">\r\n            <button type=\"submit\" className=\"button\">\r\n              <span>Start chatting</span>\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <h2>{error}</h2>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Modal;","const MyMessage = ({ message }) => {\r\n    if (message?.attachments?.length > 0) {\r\n        return (\r\n          <img\r\n            src={message.attachments[0].file}\r\n            alt=\"message-attachment\"\r\n            className=\"message-image\"\r\n            style={{ float: 'right' }}\r\n          />\r\n        );\r\n      }\r\n    return (\r\n    <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\r\n        {message.text}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n  \r\n    return (\r\n      <div className=\"message-row\">\r\n        {isFirstMessageByUser && (\r\n          <div\r\n            className=\"message-avatar\"\r\n            style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}\r\n          />\r\n        )}\r\n        {message.attachments && message.attachments.length > 0\r\n          ? (\r\n            <img\r\n              src={message.attachments[0].file}\r\n              alt=\"message-attachment\"\r\n              className=\"message-image\"\r\n              style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n            />\r\n          )\r\n          : (\r\n            <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n              {message.text}\r\n            </div>\r\n          )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default TheirMessage;","import { useState } from 'react';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\n\r\nconst MessageForm = (props) => {\r\n  const [value, setValue] = useState('');\r\n  const { chatId, creds } = props;\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n\r\n    isTyping(props, chatId);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const text = value.trim();\r\n\r\n    if (text.length > 0) {\r\n      sendMessage(creds, chatId, { text });\r\n    }\r\n\r\n    setValue('');\r\n  };\r\n\r\n  const handleUpload = (event) => {\r\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n  };\r\n\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n        <input\r\n        className=\"message-input\"\r\n        placeholder=\"Send a message...\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        onSubmit={handleSubmit}\r\n      />\r\n      <label htmlFor=\"upload-button\">\r\n        <span className=\"image-button\">\r\n          <PictureOutlined className=\"picture-icon\" />\r\n        </span>\r\n      </label>\r\n      <input\r\n        type=\"file\"\r\n        multiple={false}\r\n        id=\"upload-button\"\r\n        style={{ display: 'none' }}\r\n        onChange={handleUpload.bind(this)}\r\n      />\r\n      <button type=\"submit\" className=\"send-button\">\r\n        <SendOutlined className=\"send-icon\" />\r\n      </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default MessageForm;","import MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\nimport MessageForm from './MessageForm';\r\nimport Header from './Header';\r\n\r\nconst ChatFeed = (props) => {\r\n  const { chats, activeChat, userName, messages } = props;\r\n\r\n  const chat = chats && chats[activeChat];\r\n\r\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\r\n    <div\r\n      key={`read_${index}`}\r\n      className=\"read-receipt\"\r\n      style={{\r\n        float: isMyMessage ? 'right' : 'left',\r\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\r\n      }}\r\n    />\r\n  ));\r\n\r\n  const renderMessages = () => {\r\n    const keys = Object.keys(messages);\r\n\r\n    return keys.map((key, index) => {\r\n      const message = messages[key];\r\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n      const isMyMessage = userName === message.sender.username;\r\n\r\n      return (\r\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n          <div className=\"message-block\">\r\n            {isMyMessage\r\n              ? <MyMessage message={message} />\r\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\r\n          </div>\r\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n            {renderReadReceipts(message, isMyMessage)}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  if (!chat) return <div />;\r\n\r\n  return (\r\n    <div className=\"chat-feed\">\r\n      <div className=\"chat-title-container\">\r\n        <div className=\"chat-title\">{chat?.title}</div>\r\n        <div className=\"chat-subtitle\">\r\n          {chat.people.map((person) => ` ${person.person.username}`)}\r\n        </div>\r\n      </div>\r\n      {renderMessages()}\r\n      <div style={{ height: '100px' }} />\r\n      <div className=\"message-form-container\">\r\n        <MessageForm {...props} chatId={activeChat} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\r\nimport './App.css';\r\nimport LoginForm from './components/LoginForm';\r\n\r\nimport ChatFeed from './components/ChatFeed';\r\n\r\nimport Header from './components/Header';\r\nconst App = () => {\r\n    if (!localStorage.getItem('username')) return <LoginForm />;\r\n    return (\r\n        <ChatEngine\r\n            height=\"100vh\"\r\n            projectID=\"8fb656ec-d1c3-4182-b323-5842c89a393d\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\r\n            />\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}